generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model candidate {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name String      @db.VarChar(255)
  last_name  String      @db.VarChar(255)
  email      String?     @db.VarChar(255)
  phone      String?     @db.VarChar(255)
  resume     String?     @db.VarChar(255)
  status     String?     @db.VarChar(255)
  user_id    String      @db.Uuid
  created_at DateTime    @default(now()) @db.Timestamp(6)
  updated_at DateTime    @default(now()) @db.Timestamp(6)
  user       user        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  interview  interview[]
}

model company {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  address     String?  @db.VarChar(255)
  city        String?  @db.VarChar(255)
  state       String?  @db.VarChar(255)
  zip_code    String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model feedback {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  feedback_date  DateTime? @db.Timestamp(6)
  feedback_notes String?   @db.VarChar(255)
  rating         Int?
  interview_id   String    @db.Uuid
  user_id        String    @db.Uuid
  created_at     DateTime  @default(now()) @db.Timestamp(6)
  updated_at     DateTime  @default(now()) @db.Timestamp(6)
  interview      interview @relation(fields: [interview_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model interview {
  id               String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  interview_date   DateTime?  @db.Timestamp(6)
  interview_time   String?    @db.VarChar(255)
  interview_type   String?    @db.VarChar(255)
  interview_status String?    @db.VarChar(255)
  candidate_id     String     @db.Uuid
  user_id          String     @db.Uuid
  created_at       DateTime   @default(now()) @db.Timestamp(6)
  updated_at       DateTime   @default(now()) @db.Timestamp(6)
  feedback         feedback[]
  candidate        candidate  @relation(fields: [candidate_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user             user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model project {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @db.VarChar(255)
  description String?   @db.VarChar(255)
  start_date  DateTime? @db.Timestamp(6)
  end_date    DateTime? @db.Timestamp(6)
  status      String?   @db.VarChar(255)
  user_id     String    @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  user        user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String      @unique @db.VarChar(255)
  firstName   String?     @db.VarChar(255)
  lastName    String?     @db.VarChar(255)
  roq_user_id String      @db.VarChar(255)
  tenant_id   String      @db.VarChar(255)
  created_at  DateTime    @default(now()) @db.Timestamp(6)
  updated_at  DateTime    @default(now()) @db.Timestamp(6)
  candidate   candidate[]
  company     company[]
  feedback    feedback[]
  interview   interview[]
  project     project[]
}
